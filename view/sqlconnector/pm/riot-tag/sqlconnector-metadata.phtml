<div if="{ isExport() }">
    <h5><?php echo $this->translate('Filter') ?></h5>
    <div if="{ isSingleResultType() }">
        <div class="checkbox">
            <label for="filter_identifier">
                <input name="filter_identifier" type="checkbox" onchange="{ tick }"> <?php echo $this->translate('Filter By Identifier') ?>
            </label>
        </div>
    </div>
    <div if="{ ! filter_identifier.checked }">
        <div><?php //DON'T REMOVE THIS DIV, OTHERWISE THE EACH LOOP WON'T WORK CORRECTLY!!! ?>
            <form each="{ generateMetadataFilterList() }" class="form-inline" id="filter_form_{ key }">
                <div class="form-group">
                    <input name="filter_column_{ key }" type="text" class="form-control form-control-inline-4" value="{ column }" readonly>
                </div>&nbsp;&nbsp;
                <div class="form-group">
                    <input name="filter_operand_{ key }" type="text" class="form-control form-control-inline-3" value="{ operand }" readonly>
                </div>&nbsp;&nbsp;
                <div class="form-group">
                    <input name="filter_value_{ key }" type="text" class="form-control form-control-inline-4" value="{ value }" readonly>
                </div>&nbsp;&nbsp;
                <button class="btn btn-sm btn-danger" onclick="{ parent.removeFilter }" data-key="{ key }"><span class="glyphicon glyphicon-remove"></span></button>
            </form>
        </div>
        <br>
        <form id="filter_form_new" class="form-inline" onsubmit="{ addFilter }">
            <div class="form-group">
                <select name="column" class="form-control form-control-inline-4">
                    <option value="">- <?php echo $this->translate('Property') ?> -</option>
                    <option each="{ prop in availableProcessingTypeProperties }">{ prop }</option>
                </select>
            </div>&nbsp;&nbsp;
            <div class="form-group">
                <select name="operand" class="form-control form-control-inline-3">
                    <option value="">- <?php echo $this->translate('Operand') ?> -</option>
                    <option each="{ op in availableOperands }">{ op }</option>
                </select>
            </div>&nbsp;&nbsp;
            <div class="form-group">
                <input name="filter_value" class="form-control form-control-inline-4" placeholder="<?php echo $this->translate('Value') ?>">
            </div>&nbsp;&nbsp;
            <button class="btn btn-sm btn-success"><span class="glyphicon glyphicon-plus"></span></button>
        </form>
        <div if="{ isDuplicateColumn }">
            <br>
            <p class="alert alert-danger"><?php echo $this->translate('Your filter would never match entries, because you try to add the same property twice. This is only possible when defining a -between- filter, but your operands do not match, too. Please correct your choice.') ?></p>
        </div>
        <div if="{ ! isSingleResultType() }">
            <hr>
            <form class="form-inline">
                <div class="form-group text-">
                    <label for="order_by" class="text-btn-align">Order By</label>&nbsp;&nbsp;
                    <span>
                        <span each="{ order in orderByArr }"><span class="text-btn-align"><big>{ order }</big></span>&nbsp;<button class="btn btn-xs btn-danger" onclick="{ parent.removeOrderBy }" data-order="{ order }"><span class="glyphicon glyphicon-remove"></span></button></span>
                    </span>&nbsp;&nbsp;
                    <select name="tempOrderByProp" class="form-control form-inline-2">
                        <option value="">- <?php echo $this->translate('Property') ?> -</option>
                        <option each="{ prop in availableOrderByProperties }">{ prop }</option>
                    </select>
                    &nbsp;&nbsp;
                    <select name="tempOrderByOrder" class="form-control form-control-inline-2">
                        <option value="">- <?php echo $this->translate('Order') ?> -</option>
                        <option>ASC</option>
                        <option>DESC</option>
                    </select>
                    &nbsp;&nbsp;
                    <button class="btn btn-sm btn-success" onclick="{ addOrderBy }"><span class="glyphicon glyphicon-plus"></span></button>
                </div>
            </form>
            <hr>
            <form class="form-inline">
                <div class="form-group">
                    <label for="limit">Limit</label>&nbsp;&nbsp;
                    <input name="limit" type="text" class="form-control form-control-inline-2" placeholder="Limit" onchange="{ tick }">
                </div>&nbsp;&nbsp;
                <div class="form-group">
                    <label for="offset">Offset</label>&nbsp;&nbsp;
                    <input name="offset" type="text" class="form-control form-control-inline-2" placeholder="Offset" onchange="{ tick }">
                </div>
            </form>
        </div>
    </div>
</div>
<div if="{ isImport() }">
    <h5><?php echo $this->translate('Import Options')?></h5>
    <div class="row">
        <div class="col-md-12">
            <button name="empty_table" class="btn btn-default text-uppercase" onclick="{ toggleEmptyTable }"><?php echo $this->translate('truncate table') ?>&nbsp;<span class="glyphicon glyphicon-unchecked"></span></button>
            &nbsp;&nbsp;
            <button name="try_update" class="btn btn-default text-uppercase" onclick="{ toggleTryUpdate }"><?php echo $this->translate('update existing rows') ?>&nbsp;<span class="glyphicon glyphicon-edit"></span></button>
        </div>
    </div>
</div>
<script type="text/javascript">
    function (context) {
        var self = this,
            handlerData = context.handlerData,
            handlerDeferred = context.handlerDeferred,
            $modal = context["$modal"],
            __toFormFilter = function (filterKey, filterValue) {
                //FilterValue is already an object so we only need to add the filterKey
                if (_.isObject(filterValue)) {
                    filterValue.key = filterKey;
                    return filterValue;
                }

                //Filter is a simple Key-Value-Pair which resolves to equal filter
                return {
                    'key' : filterKey,
                    'column' : filterKey,
                    'operand' : "=",
                    'value' : filterValue
                };
            };

        $modal.on("hide.bs.modal", function () {
            //Push back old metadata if deferred is not resolved yet
            if (! handlerDeferred.promise.isFulfilled()) {
                handlerDeferred.resolve(handlerData.task_metadata);
            }
        });

        $modal.find(".btn-save").click(function () {
            handlerDeferred.resolve(self.collectMetadata());
            $modal.modal('hide');
        });


        this.availableProcessingTypeProperties = [];
        this.availableOperands = ["=", "<", "<=", ">", ">=", "like", "ilike"];
        this.availableOrderByProperties = [];
        this.isDuplicateColumn = false;
        this.orderByArr = [];
        this.syncedWithParent = false;
        this.tick = function () {};

        this.isExport = function () {
            return self.taskType == '<?php echo \Prooph\Processing\Processor\Definition::TASK_COLLECT_DATA  ?>';
        }

        this.isImport = function () {
            return self.taskType == '<?php echo \Prooph\Processing\Processor\Definition::TASK_PROCESS_DATA  ?>';
        }

        this.syncWithProcessManager = function () {
            self.connector = context.app.getConnector(handlerData.processing_id);
            self.processingType = context.app.getProcessingType(handlerData.task_processing_type);
            self.taskType = handlerData.task_type;
            self.applyMetadata(handlerData.task_metadata);
            self.availableProcessingTypeProperties = self.findAvailableProcessingTypeProperties();
            self.availableOrderByProperties    = self.findAvailableOrderByProperties();
            self.syncedWithParent = true;
            self.update();
        }

        this.isSingleResultType = function () {
            if (! self.processingType) return false;

            return self.processingType.native_type !== "collection";
        }

        this.findAvailableProcessingTypeProperties = function () {
            if (! self.processingType) return [];

            var processingTypeObj = self.processingType;

            if (processingTypeObj.native_type === "collection") processingTypeObj = processingTypeObj.properties.item;

            var properties = [];

            for (prop in processingTypeObj.properties) {
                properties.push(prop);
            }

            return properties;
        }

        this.findAvailableOrderByProperties = function () {
            var processingTypeProperties = self.findAvailableProcessingTypeProperties();

            var orderByProps = _.map(self.orderByArr, function (order) {
                return order.split(" ")[0];
            });

            return _.filter(processingTypeProperties, function (prop) {
                return ! _.contains(orderByProps, prop);
            });
        }

        this.generateMetadataFilterList = function () {
            var filters = self.filter || {};


            var filterList = [];

            for (key in filters) {
                filterList.push(__toFormFilter( key, _.clone(filters[key])));
            }

            return filterList;
        }

        this.addFilter = function (e) {
            e.preventDefault();
            var newFilter = {
                column : self.column.value,
                operand : self.operand.value,
                value : self.filter_value.value
            };

            var filterKey = newFilter.column;

            //We allow the selection of a column for max two times to specify a between like filter
            //otherwise we will show an error
            if (typeof self.filter[filterKey + "_1"] !== "undefined") {
                self.isDuplicateColumn = true;
                return;
            } else {
                self.isDuplicateColumn = false;
            }

            if (typeof this.filter[filterKey] !== "undefined") {
                var oneFilter = self.filter[filterKey];

                if (oneFilter.operand === "=" || oneFilter.operand === "like" || oneFilter.operand === "ilike"
                    || self.operand === "=" || self.operand === "like" || self.operand === "ilike") {
                    self.isDuplicateColumn = true;
                    return;
                } else {
                    self.isDuplicateColumn = false;
                }

                delete self.filter[filterKey];
                self.filter[filterKey + "_1"] = oneFilter;
                filterKey = filterKey + "_2";
            }

            self.filter[filterKey] = newFilter;

            self.column.value = "";
            self.operand.value = "";
            self.filter_value.value = "";

            self.one("update", function () {
                $(self.column).focus();
            })
        }

        this.removeFilter = function (e) {
            var filterKey = $(e.target).closest("button").data("key");
            delete self.filter[filterKey];
        }

        this.addOrderBy = function (e) {
            if (! self.tempOrderByProp.value) return;
            if (! self.tempOrderByOrder.value) return;

            self.orderByArr.push(self.tempOrderByProp.value + " " + self.tempOrderByOrder.value);

            self.tempOrderByProp.value = "";
            self.tempOrderByOrder.value = "";

            self.availableOrderByProperties = self.findAvailableOrderByProperties();
        }

        this.removeOrderBy = function (e) {
            e.preventDefault();
            var order = $(e.target).closest("button").data("order");

            self.orderByArr = _.filter(self.orderByArr, function (orderStr) {
                return orderStr != order;
            })

            self.availableOrderByProperties = self.findAvailableOrderByProperties();
        }

        this.toggleEmptyTable = function () {
            $(self.empty_table).toggleClass("active").find("span").toggleClass("glyphicon-unchecked glyphicon-ok");
        }

        this.toggleTryUpdate = function () {
            $(self.try_update).toggleClass("active").find("span").toggleClass("glyphicon-edit glyphicon-ok");
        }

        this.collectMetadata = function () {
            var tmpMetadata = {};

            if (self.isExport()) {
                if (self.filter_identifier.checked) {
                    tmpMetadata.filter_identifier = true;
                }

                if (! tmpMetadata.filter_identifier) {
                    if (! _.isEmpty(self.filter)) {
                        tmpMetadata.filter = self.filter;
                    }

                    if (! self.isSingleResultType()) {
                        if (!_.isEmpty(self.orderByArr)) {
                            tmpMetadata.order_by = self.orderByArr.join(", ");
                        }

                        if (self.limit.value) {
                            tmpMetadata.limit = self.limit.value;
                        }

                        if (self.offset.value) {
                            tmpMetadata.offset = self.offset.value;
                        }
                    }

                }
            }

            if (self.isImport()) {
                if ($(self.empty_table).hasClass("active")) {
                    tmpMetadata.empty_table = true;
                }

                if ($(self.try_update).hasClass("active")) {
                    tmpMetadata.try_update = true;
                }
            }

            return tmpMetadata;
        }

        this.applyMetadata = function (metadata) {
            self.filter = metadata.filter || {};

            if (self.isExport()) {
                if (metadata.filter_identifier) {
                    self.filter_identifier.checked = 1;
                } else {
                    self.filter_identifier.checked = null;
                }

                if (metadata.order_by) {
                    self.orderByArr = metadata.order_by.split(",").map(function(order) {
                        return $.trim(order);
                    });
                } else {
                    self.orderByArr = [];
                }

                if (metadata.limit) {
                    self.limit.value = metadata.limit;
                }

                if (metadata.offset) {
                    self.offset.value = metadata.offset;
                }
            }

            if (self.isImport()) {
                if (metadata.empty_table && ! $(self.empty_table).hasClass("active")) {
                    self.toggleEmptyTable();
                }

                if (! metadata.empty_table && $(self.empty_table).hasClass("active")) {
                    self.toggleEmptyTable();
                }

                if (metadata.try_update && ! $(self.try_update).hasClass("active")) {
                    self.toggleTryUpdate();
                }

                if (! metadata.try_update && $(self.try_update).hasClass("active")) {
                    self.toggleTryUpdate();
                }
            }
        }

        this.on("mount", function () {
            self.syncWithProcessManager();
        });
    }
</script>